{
  "openapi": "3.0.3",
  "info": {
    "title": "Partner OpenAPI",
    "version": "1.2.0",
    "description": "Partner OpenAPI",
    "contact": {
      "email": "p2p.axa@axa.ch",
      "name": "P2P",
      "url": "https://www.axa.ch"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://www.axa.ch/etc/clientlibs/axa/core-assets/images/logo-AXA.svg"
    },
    "x-visibility": "public"
  },
  "servers": [
    {
      "url": "https://api-sandbox.axa.ch",
      "description": "Sandbox API",
      "variables": {}
    },
    {
      "url": "https://api.acc.axa.ch",
      "description": "Non-Production API",
      "variables": {}
    },
    {
      "url": "https://api.axa.ch",
      "description": "Production API",
      "variables": {}
    }
  ],
  "tags": [
    {
      "name": "Partner",
      "description": "Main search and access to natural and legal person"
    },
    {
      "name": "Addresses",
      "description": "Access to all addresses of a partner"
    },
    {
      "name": "Contact Information",
      "description": "Access to email and phone numbers of a partner"
    },
    {
      "name": "Payment Accounts",
      "description": "Access to payment accounts of a partner"
    },
    {
      "name": "Partner Relations",
      "description": "Access to all partner to partner relations"
    },
    {
      "name": "Contact Documents",
      "description": "Access to contact document history elements and attachments"
    },
    {
      "name": "Credit Check",
      "description": "Access to credit check validation"
    }
  ],
  "paths": {
    "/rest/openapi/partner/v1/partners": {
      "get": {
        "tags": [
          "Partner"
        ],
        "parameters": [
          {
            "name": "type",
            "description": "Flag if natural or legal persons must be searched. Leave empty for license place, policy number or claims number search.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "NATURAL_PERSON",
                "LEGAL_PERSON"
              ]
            }
          },
          {
            "name": "streetName",
            "schema": {
              "type": "string",
              "maxLength": 50
            },
            "in": "query",
            "required": false,
            "example": "Bahnhofstrasse",
            "description": "Street name filter attribute."
          },
          {
            "name": "postCode",
            "schema": {
              "type": "string",
              "maxLength": 10
            },
            "in": "query",
            "required": false,
            "example": "9500",
            "description": "Valid post code of the customer's current residence."
          },
          {
            "name": "town",
            "schema": {
              "type": "string",
              "maxLength": 50
            },
            "in": "query",
            "required": false,
            "example": "Wil",
            "description": "Name of the town of the customer's current residence."
          },
          {
            "name": "licensePlate",
            "schema": {
              "type": "string",
              "maxLength": 24
            },
            "in": "query",
            "required": false,
            "example": "SG 12345",
            "description": "License plate of the partner's car."
          },
          {
            "name": "policyNumber",
            "schema": {
              "type": "integer",
              "maximum": 2147483648
            },
            "in": "query",
            "required": false,
            "description": "Number of an existing policy",
            "example": 123456789
          },
          {
            "name": "claimNumber",
            "schema": {
              "type": "string",
              "maxLength": 16
            },
            "in": "query",
            "required": false,
            "description": "Number of an existing claim",
            "example": "2147483648/0001"
          },
          {
            "name": "firstname",
            "schema": {
              "type": "string",
              "maxLength": 40
            },
            "in": "query",
            "required": false,
            "description": "First name filter attribute. Only applicable if type = NATURAL_PERSON.",
            "example": "Harry"
          },
          {
            "name": "lastname",
            "schema": {
              "type": "string",
              "maxLength": 40
            },
            "in": "query",
            "required": false,
            "description": "Last name filter attribute. Only applicable if type = NATURAL_PERSON.",
            "example": "Hole"
          },
          {
            "name": "birthdate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "in": "query",
            "required": false,
            "example": "1990-07-21",
            "description": "Date of birth of the customer. Only applicable if type = NATURAL_PERSON."
          },
          {
            "name": "socialSecurityNumber",
            "schema": {
              "type": "string",
              "pattern": "^756\\.?\\d{4}\\.?\\d{4}\\.?\\d{2}$"
            },
            "in": "query",
            "required": false,
            "example": "756.0101.2121.11",
            "description": "Valid CH or LI social security number or old format of AHV number, optional with . as separator."
          },
          {
            "name": "companyName",
            "schema": {
              "type": "string",
              "maxLength": 40
            },
            "in": "query",
            "required": false,
            "description": "Filter attribute. Only applicable if type = LEGAL_PERSON.",
            "example": "Blockwork GmbH"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "discriminator": {
                      "propertyName": "partnerType",
                      "mapping": {
                        "NATURAL_PERSON": "#/components/schemas/PartnerNaturalPersonSearchResponse",
                        "LEGAL_PERSON": "#/components/schemas/PartnerLegalPersonSearchResponse"
                      }
                    },
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PartnerNaturalPersonSearchResponse"
                      },
                      {
                        "$ref": "#/components/schemas/PartnerLegalPersonSearchResponse"
                      }
                    ]
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_read"
            ]
          }
        ],
        "summary": "read partner list",
        "operationId": "readPartnerList",
        "description": "Read list of partners matching to the filter attributes. NOTE: For NATURAL_PERSON either licensePlate, policy number, claims number or a combincation of firstname, lastname and postCode/town is mandatory. For LEGAL_PERSON either license plate, policy number, claims number or a combination of companyName and postCode/town is mandatory."
      },
      "post": {
        "tags": [
          "Partner"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "discriminator": {
                  "propertyName": "partnerType",
                  "mapping": {
                    "NATURAL_PERSON": "#/components/schemas/PartnerNaturalPersonObject",
                    "LEGAL_PERSON": "#/components/schemas/PartnerLegalPersonObject"
                  }
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PartnerNaturalPersonObject"
                  },
                  {
                    "$ref": "#/components/schemas/PartnerLegalPersonObject"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "discriminator": {
                    "propertyName": "partnerType",
                    "mapping": {
                      "NATURAL_PERSON": "#/components/schemas/PartnerNaturalPersonObject",
                      "LEGAL_PERSON": "#/components/schemas/PartnerLegalPersonObject"
                    }
                  },
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartnerNaturalPersonObject"
                    },
                    {
                      "$ref": "#/components/schemas/PartnerLegalPersonObject"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_write"
            ]
          }
        ],
        "summary": "create partner",
        "operationId": "createPartner",
        "description": "Create a new partner."
      }
    },
    "/rest/openapi/partner/v1/partners/{id}": {
      "get": {
        "tags": [
          "Partner"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          },
          {
            "name": "partnerRelationsAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2023-01-18"
            },
            "description": "relations in response can be filtered by a cut-off date. If empty the current day is used"
          },
          {
            "name": "addressesAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2023-01-18"
            },
            "description": "addresses in response can be filtered by a cut-off date. If empty the current day is used"
          },
          {
            "name": "_expand",
            "description": "Response can be expanded to contain additional sub-resources",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "List of sub-resources to be expanded, separated by , possible values: /contactInformationPreference,/addresses, /partnerRelations, /paymentAccounts"
            },
            "example": "/contactInformationPreference,/addresses,/partnerRelations,/paymentAccounts"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartnerNaturalPersonResponse"
                    },
                    {
                      "$ref": "#/components/schemas/PartnerLegalPersonResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_read"
            ]
          }
        ],
        "summary": "read partner",
        "operationId": "readPartnerById",
        "description": "Read all details of a partner. With the query parameter _expand it is possible to get aggregated data from this partner."
      }
    },
    "/rest/openapi/partner/v1/partners/{id}/addresses": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          },
          {
            "name": "at",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2023-01-18"
            },
            "description": "addresses in response can be filtered by a cut-off date. If empty the current day is used"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerAddressList"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_read"
            ]
          }
        ],
        "summary": "read addresses of a partner",
        "operationId": "readAddresses",
        "description": "Read list of address of a partner"
      },
      "post": {
        "tags": [
          "Addresses"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerAddressObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerAddressObject"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_write"
            ]
          }
        ],
        "summary": "create address to a partner",
        "operationId": "createAddress",
        "description": "Create a new address to an existing partner."
      }
    },
    "/rest/openapi/partner/v1/partners/{id}/addresses/PRIMARY/history": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerAddressList"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_read"
            ]
          }
        ],
        "summary": "read primary address history of a partner",
        "operationId": "readPrimaryAddressHistory",
        "description": "Read primary address history of a partner in chronological order. Restriction: current CRM API only supports current and future primary addresses via API. \n"
      }
    },
    "/rest/openapi/partner/v1/partners/{id}/addresses/{addressId}": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          },
          {
            "name": "addressId",
            "description": "ID of the address of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerAddressObject"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_read"
            ]
          }
        ],
        "summary": "read address by id of a partner",
        "operationId": "readAddress",
        "description": "Read address by address id of a partner"
      },
      "put": {
        "tags": [
          "Addresses"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          },
          {
            "name": "addressId",
            "description": "ID of the address of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerAddressObjectUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerAddressObject"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc. or valid from is not identical as the old address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_write"
            ]
          }
        ],
        "summary": "modify address of a partner",
        "operationId": "modifyAddress",
        "description": "Modifies an existing address of an existing partner. \n- The valid-from date must be identical as the old address.\n- you can leave it empty and it will use automatically the old address valid-from date. \nSpecial case address type is PRIMARY: \n- you can only modify a future address that was already created.\n- if you want to adapt the current one and not the future one, you need to delete the future one fist and recreate it.\nTip: If your valid-from must be different, use the POST operation for a move for a PRIMARY address.\n"
      },
      "post": {
        "tags": [
          "Addresses"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          },
          {
            "name": "addressId",
            "description": "ID of the address of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerAddressObjectCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerAddressObject"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc. or valid from must be different than the old one.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_write"
            ]
          }
        ],
        "summary": "move partner to a new address",
        "operationId": "moveAddress",
        "description": "Move an existing partner to a new address location.  \nA new address will be created, including a new id and the old address will be terminated (valid to).\nThis is only supported for addresses of type PRIMARY.\nThe valid from date must different than the old address or will be set automatically to actual date, if empty.\nIf new valid from must be always later than the old valid from.\nIf you want to modify (=correct) an address use the PUT operation.\n"
      },
      "delete": {
        "tags": [
          "Addresses"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          },
          {
            "name": "addressId",
            "description": "ID of the address of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_write"
            ]
          }
        ],
        "summary": "delete address of a partner",
        "operationId": "deleteAddress",
        "description": "Delete an address of an existing partner. Delete for PRIMARY can only be done for a future address not for the current"
      }
    },
    "/rest/openapi/partner/v1/partners/{id}/contactInformation": {
      "get": {
        "tags": [
          "Contact Information"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactInformationList"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_read"
            ]
          }
        ],
        "summary": "read contact information list",
        "operationId": "readContactInformationList",
        "description": "Read contact information of a partner"
      },
      "post": {
        "tags": [
          "Contact Information"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerContactInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactInformation"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. Retry\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "423": {
            "description": "Locked - The resource that is being accessed is locked.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. \nA user is editing the partner at this moment and no UPDATES are possible. Please try again later or queue the update.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_write"
            ]
          }
        ],
        "summary": "create contact information",
        "operationId": "createContactInformation",
        "description": "Create a new contact information to an existing partner."
      }
    },
    "/rest/openapi/partner/v1/partners/{id}/contactInformation/{contactInformationId}": {
      "get": {
        "tags": [
          "Contact Information"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          },
          {
            "name": "contactInformationId",
            "description": "ID of the contact information of the partner.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "EMAIL-001"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactInformation"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_read"
            ]
          }
        ],
        "summary": "read contact information",
        "operationId": "readContactInformation",
        "description": "Read contact information by partner id and contact information id of a partner"
      },
      "put": {
        "tags": [
          "Contact Information"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          },
          {
            "name": "contactInformationId",
            "description": "ID of the contact information of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "EMAIL-001"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerContactInformationValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactInformation"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. Retry\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "423": {
            "description": "Locked - The resource that is being accessed is locked.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. \nA user is editing the partner at this moment and no UPDATES are possible. Please try again later or queue the update.\n"
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_write"
            ]
          }
        ],
        "summary": "modify contact information",
        "operationId": "modifyContactInformation",
        "description": "Modify an existing contact information to an existing partner."
      },
      "delete": {
        "tags": [
          "Contact Information"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          },
          {
            "name": "contactInformationId",
            "description": "ID of the partner contact information.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "PHONE-038"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. Retry\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "423": {
            "description": "Locked - The resource that is being accessed is locked.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. \nA user is editing the partner at this moment and no UPDATES are possible. Please try again later or queue the update.\n"
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_write"
            ]
          }
        ],
        "summary": "delete contact information",
        "operationId": "deleteContactInformation",
        "description": "Deletes a contact information of an existing partner."
      }
    },
    "/rest/openapi/partner/v1/partners/{id}/paymentAccounts": {
      "get": {
        "tags": [
          "Payment Accounts"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerPaymentAccountsList"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_read"
            ]
          }
        ],
        "summary": "read payment accounts",
        "operationId": "readPaymentAccounts",
        "description": "Read payment accounts of a partner"
      },
      "post": {
        "tags": [
          "Payment Accounts"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerPaymentAccountsCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerPaymentAccounts"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. Retry\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "423": {
            "description": "Locked - The resource that is being accessed is locked.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. \nA user is editing the partner at this moment and no UPDATES are possible. Please try again later or queue the update.\n"
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_write"
            ]
          }
        ],
        "summary": "create payment account",
        "operationId": "createPaymentAccount",
        "description": "Create a new payment account to an existing partner."
      }
    },
    "/rest/openapi/partner/v1/partners/{id}/paymentAccounts/{paymentAccountId}": {
      "get": {
        "tags": [
          "Payment Accounts"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          },
          {
            "name": "paymentAccountId",
            "description": "ID of the partner payment account.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "234234-0001"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerPaymentAccounts"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_read"
            ]
          }
        ],
        "summary": "read payment account",
        "operationId": "readPaymentAccount",
        "description": "Read an existing payment account of a partner"
      },
      "put": {
        "tags": [
          "Payment Accounts"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          },
          {
            "name": "paymentAccountId",
            "description": "ID of the partner payment account.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "234234-0001"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerPaymentAccountsModify"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerPaymentAccounts"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. Retry\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "423": {
            "description": "Locked - The resource that is being accessed is locked.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. \nA user is editing the partner at this moment and no UPDATES are possible. Please try again later or queue the update.\n"
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_write"
            ]
          }
        ],
        "summary": "modify payment account",
        "operationId": "modifyPaymentAccount",
        "description": "Modify an existing payment account to an existing partner."
      },
      "delete": {
        "tags": [
          "Payment Accounts"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          },
          {
            "name": "paymentAccountId",
            "description": "ID of the partner payment account.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "234234-0001"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. Retry\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "423": {
            "description": "Locked - The resource that is being accessed is locked.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. \nA user is editing the partner at this moment and no UPDATES are possible. Please try again later or queue the update.\n"
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_write"
            ]
          }
        ],
        "summary": "delete payment account of a partner",
        "operationId": "deletePaymentAccount",
        "description": "Delete a payment account of an existing partner."
      }
    },
    "/rest/openapi/partner/v1/partners/{id}/partnerRelations": {
      "get": {
        "tags": [
          "Partner Relations"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          },
          {
            "name": "at",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2023-01-18"
            },
            "description": "relations in response can be filtered by a cut-off date. If empty the current day is used"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerPartnerRelations"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_read"
            ]
          }
        ],
        "summary": "read partner to partner relations",
        "operationId": "readPartnerToPartnerRelations",
        "description": "Read partner to partner relations, optional at a specific cut-of date"
      },
      "post": {
        "tags": [
          "Partner Relations"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerPartnerRelation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerPartnerRelationObject"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. Retry\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "423": {
            "description": "Locked - The resource that is being accessed is locked.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. \nA user is editing the partner at this moment and no UPDATES are possible. Please try again later or queue the update.\n"
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_write"
            ]
          }
        ],
        "summary": "create partner relation to partner",
        "operationId": "createPartnerRelation",
        "description": "Create a new partner relation to an existing partner."
      }
    },
    "/rest/openapi/partner/v1/partners/{id}/partnerRelations/{relationId}": {
      "get": {
        "tags": [
          "Partner Relations"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          },
          {
            "name": "relationId",
            "description": "ID of the partner relation.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "242342434-IS_MARRIED_WITH"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerPartnerRelationObject"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_read"
            ]
          }
        ],
        "summary": "read partner to partner relation",
        "operationId": "readPartnerToPartnerRelation",
        "description": "Read an existing partner to partner relations"
      },
      "delete": {
        "tags": [
          "Partner Relations"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123456789
            }
          },
          {
            "name": "relationId",
            "description": "ID of the partner relation.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "242342434-IS_MARRIED_WITH"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. Retry\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "423": {
            "description": "Locked - The resource that is being accessed is locked.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. \nA user is editing the partner at this moment and no UPDATES are possible. Please try again later or queue the update.\n"
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_write"
            ]
          }
        ],
        "summary": "delete partner relation of a partner",
        "operationId": "deletePartnerRelation",
        "description": "Deletes a partner relation of an existing partner."
      }
    },
    "/rest/openapi/partner/v1/partners/{partnerId}/contact-documentation-items": {
      "get": {
        "tags": [
          "Contact Documents"
        ],
        "parameters": [
          {
            "name": "partnerId",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123456"
            }
          },
          {
            "name": "category",
            "description": "Filter the list for a given contact documentation category",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "REPORT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "discriminator": {
                      "propertyName": "category",
                      "mapping": {
                        "LEAD": "#/components/schemas/ContactDocumentationItemLead",
                        "REPORT": "#/components/schemas/ContactDocumentationItemReport"
                      }
                    },
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/ContactDocumentationItemLead"
                      },
                      {
                        "$ref": "#/components/schemas/ContactDocumentationItemReport"
                      }
                    ]
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/ReadContactDocumentationItem"
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_read"
            ]
          }
        ],
        "summary": "read contact documentation items",
        "operationId": "readContactDocumentationItemList",
        "description": "Read list of contact documentation items of a given partner."
      }
    },
    "/rest/openapi/partner/v1/partners/{partnerId}/contact-documentation-items/{contactDocumentationItemId}/attachment": {
      "get": {
        "tags": [
          "Contact Documents"
        ],
        "parameters": [
          {
            "name": "partnerId",
            "description": "ID of the partner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123456"
            }
          },
          {
            "name": "contactDocumentationItemId",
            "description": "ID of the contact documentation item",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5254000b-04c2-1edd-aaa3-16bfddf1d91c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "axa-ch_openapi_partner_read"
            ]
          }
        ],
        "summary": "read contact documentation item attachments",
        "operationId": "readContactDocumentationItemAttachment",
        "description": "Read the attachment of a given contact documentation item."
      }
    },
    "/rest/openapi/partner/v1/creditCheck": {
      "post": {
        "tags": [
          "Credit Check"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCheck"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCheck"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. Retry\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "423": {
            "description": "Locked - The resource that is being accessed is locked.\nOne special case: ZXBPL3ODT/031 - Partner with id 'id' is locked and cannot be updated. \nA user is editing the partner at this moment and no UPDATES are possible. Please try again later or queue the update.\n"
          },
          "4XX": {
            "description": "Client error, e.g. bad request, unauthorized, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error, e.g. internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AxaError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2-client-credentials": [
              "ch_openapi_partner_check_credit"
            ]
          }
        ],
        "summary": "partner credit check",
        "operationId": "partnerCreditCheck",
        "description": "credit check for partner"
      }
    }
  },
  "components": {
    "schemas": {
      "PartnerResponse": {
        "discriminator": {
          "propertyName": "partnerType",
          "mapping": {
            "NATURAL_PERSON": "#/components/schemas/PartnerNaturalPersonResponse",
            "LEGAL_PERSON": "#/components/schemas/PartnerLegalPersonResponse"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartnerNaturalPersonResponse"
          },
          {
            "$ref": "#/components/schemas/PartnerLegalPersonResponse"
          }
        ]
      },
      "PartnerSearchResponse": {
        "discriminator": {
          "propertyName": "partnerType",
          "mapping": {
            "NATURAL_PERSON": "#/components/schemas/PartnerNaturalPersonSearchResponse",
            "LEGAL_PERSON": "#/components/schemas/PartnerLegalPersonSearchResponse"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartnerNaturalPersonSearchResponse"
          },
          {
            "$ref": "#/components/schemas/PartnerLegalPersonSearchResponse"
          }
        ]
      },
      "PartnerObject": {
        "discriminator": {
          "propertyName": "partnerType",
          "mapping": {
            "NATURAL_PERSON": "#/components/schemas/PartnerNaturalPersonObject",
            "LEGAL_PERSON": "#/components/schemas/PartnerLegalPersonObject"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartnerNaturalPersonObject"
          },
          {
            "$ref": "#/components/schemas/PartnerLegalPersonObject"
          }
        ]
      },
      "PartnerNaturalPersonResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PartnerBase"
          },
          {
            "$ref": "#/components/schemas/PartnerTypeNatural"
          },
          {
            "$ref": "#/components/schemas/PartnerNaturalPerson"
          },
          {
            "$ref": "#/components/schemas/PartnerAddressesObject"
          },
          {
            "$ref": "#/components/schemas/PartnerContactInformationObject"
          },
          {
            "$ref": "#/components/schemas/PartnerContactInformationPreferenceObject"
          },
          {
            "$ref": "#/components/schemas/PartnerPartnerRelationsObject"
          },
          {
            "$ref": "#/components/schemas/PartnerPaymentAccountsObject"
          },
          {
            "$ref": "#/components/schemas/AddressWorldwideObject"
          }
        ]
      },
      "PartnerNaturalPersonSearchResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PartnerBase"
          },
          {
            "$ref": "#/components/schemas/PartnerTypeNatural"
          },
          {
            "$ref": "#/components/schemas/PartnerNaturalPerson"
          },
          {
            "$ref": "#/components/schemas/AddressWorldwideObject"
          }
        ]
      },
      "PartnerNaturalPersonObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PartnerBase"
          },
          {
            "$ref": "#/components/schemas/PartnerTypeNatural"
          },
          {
            "$ref": "#/components/schemas/PartnerNaturalPerson"
          },
          {
            "$ref": "#/components/schemas/AddressWorldwideObject"
          }
        ]
      },
      "PartnerLegalPersonResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PartnerBase"
          },
          {
            "$ref": "#/components/schemas/PartnerTypeLegal"
          },
          {
            "$ref": "#/components/schemas/PartnerLegalPerson"
          },
          {
            "$ref": "#/components/schemas/PartnerAddressesObject"
          },
          {
            "$ref": "#/components/schemas/PartnerContactInformationObject"
          },
          {
            "$ref": "#/components/schemas/PartnerContactInformationPreferenceObject"
          },
          {
            "$ref": "#/components/schemas/PartnerPartnerRelationsObject"
          },
          {
            "$ref": "#/components/schemas/PartnerPaymentAccountsObject"
          },
          {
            "$ref": "#/components/schemas/AddressWorldwideObject"
          }
        ]
      },
      "PartnerLegalPersonSearchResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PartnerBase"
          },
          {
            "$ref": "#/components/schemas/PartnerTypeLegal"
          },
          {
            "$ref": "#/components/schemas/PartnerLegalPerson"
          },
          {
            "$ref": "#/components/schemas/AddressWorldwideObject"
          }
        ]
      },
      "PartnerLegalPersonObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PartnerBase"
          },
          {
            "$ref": "#/components/schemas/PartnerTypeLegal"
          },
          {
            "$ref": "#/components/schemas/PartnerLegalPerson"
          },
          {
            "$ref": "#/components/schemas/AddressWorldwideObject"
          }
        ]
      },
      "PartnerTypeLegal": {
        "type": "object",
        "required": [
          "partnerType"
        ],
        "properties": {
          "partnerType": {
            "type": "string",
            "description": "Flag whether partner is a legal or natural person.",
            "enum": [
              "LEGAL_PERSON"
            ],
            "example": "LEGAL_PERSON"
          }
        }
      },
      "PartnerTypeNatural": {
        "type": "object",
        "required": [
          "partnerType"
        ],
        "properties": {
          "partnerType": {
            "type": "string",
            "description": "Flag whether partner is a legal or natural person.",
            "enum": [
              "NATURAL_PERSON"
            ],
            "example": "NATURAL_PERSON"
          }
        }
      },
      "PartnerBase": {
        "type": "object",
        "required": [
          "correspondenceLanguage",
          "partnerType"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "example": 7895684,
            "description": "Unique id to identify the partner within AXA Systems."
          },
          "correspondenceLanguage": {
            "type": "string",
            "enum": [
              "de",
              "it",
              "fr",
              "en"
            ],
            "example": "de",
            "description": "Correspondence language chosen by the partner according to ISO 639-1."
          },
          "phoneNumber": {
            "type": "string",
            "example": "+41 44 123 45 67",
            "description": "Phone number",
            "maxLength": 30
          },
          "mobilePhoneNumber": {
            "type": "string",
            "example": "+41 79 123 45 67",
            "description": "Mobile phone number",
            "maxLength": 30
          },
          "faxNumber": {
            "type": "string",
            "example": "+41 44 123 45 77",
            "description": "Fax number",
            "maxLength": 30
          },
          "emailAddress": {
            "type": "string",
            "format": "email",
            "example": "jane.doe@example.com",
            "description": "email address",
            "maxLength": 241
          }
        }
      },
      "PartnerAddressBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "example": 2342342,
            "description": "Unique id to identify the partner address."
          },
          "type": {
            "type": "string",
            "description": "represent the type of address. For partner type LEGAL_PERSON only PRIMARY and SECONDARY are allowed",
            "enum": [
              "PRIMARY",
              "SECONDARY",
              "BUSINESS",
              "VACATION",
              "COMMERCIAL_REGISTER"
            ],
            "example": "PRIMARY"
          }
        }
      },
      "PartnerAddressValidity": {
        "type": "object",
        "properties": {
          "validFrom": {
            "type": "string",
            "format": "date",
            "example": "2023-01-01",
            "description": "date from where the address is valid.",
            "maxLength": 10
          },
          "validTo": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "example": "9999-12-31",
            "description": "date until the address is valid.",
            "maxLength": 10
          }
        }
      },
      "PartnerAddressLanguageExtension": {
        "type": "object",
        "properties": {
          "correspondenceLanguage": {
            "type": "string",
            "enum": [
              "de",
              "it",
              "fr",
              "en"
            ],
            "example": "de",
            "description": "Correspondence language chosen by the partner according to ISO 639-1. Only valid and mandatory for type LEGAL_PERSON"
          }
        }
      },
      "PartnerAddressObjectCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PartnerAddressBase"
          },
          {
            "$ref": "#/components/schemas/AddressWorldwide"
          },
          {
            "$ref": "#/components/schemas/PartnerAddressLanguageExtension"
          },
          {
            "$ref": "#/components/schemas/PartnerAddressValidity"
          }
        ],
        "required": [
          "type",
          "country",
          "postCode",
          "town",
          "streetName"
        ]
      },
      "PartnerAddressObjectUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AddressWorldwide"
          },
          {
            "$ref": "#/components/schemas/PartnerAddressLanguageExtension"
          },
          {
            "$ref": "#/components/schemas/PartnerAddressValidity"
          }
        ],
        "required": [
          "country",
          "postCode",
          "town",
          "streetName"
        ]
      },
      "PartnerAddressObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PartnerAddressBase"
          },
          {
            "$ref": "#/components/schemas/AddressWorldwide"
          },
          {
            "$ref": "#/components/schemas/PartnerAddressLanguageExtension"
          },
          {
            "$ref": "#/components/schemas/PartnerAddressValidity"
          }
        ],
        "required": [
          "type",
          "country",
          "postCode",
          "town",
          "streetName"
        ]
      },
      "PartnerPartnerRelationObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PartnerPartnerRelationInternal"
          },
          {
            "$ref": "#/components/schemas/PartnerPartnerRelation"
          }
        ]
      },
      "PartnerPartnerRelationInternal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "123456-2",
            "description": "Unique id to identify a relation of a partner"
          },
          "internalType": {
            "type": "string",
            "description": "represent the internal code of the relation",
            "example": "2"
          }
        }
      },
      "PartnerPartnerRelation": {
        "type": "object",
        "required": [
          "type",
          "partnerId"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "represent the external type of the relation.",
            "enum": [
              "MEMBER_OF_HOUSEHOLD",
              "IS_MARRIED_WITH",
              "PARENT_OF",
              "CHILD_OF",
              "SIBLINGS_OF",
              "RELATION_WITH",
              "PARTNER_OF",
              "BROTHER_SISTER_IN_LAW_OF",
              "UNCLE_AUNT_OF",
              "NIECE_NEPHEW_OF",
              "GRANDPARENTS_OF",
              "GRAND_SON_DAUGHTER_OF",
              "LIVING_APART_FROM",
              "COUSIN_OF",
              "IS_RELATED_TO",
              "REDIRECTION_DEATH_LIQUIDATION_TO",
              "REDIRECTION_DEATH_LIQUIDATION_OF",
              "ADVISOR_OF",
              "HAS_ADVISOR",
              "ADVISOR2_OF",
              "HAS_ADVISOR2",
              "MANAGING_DIRECTOR_OF",
              "MANAGING_DIRECTOR",
              "COMPANY_OWNER_OF",
              "COMPANY_OWNER",
              "EMPLOYEE_OF",
              "EMPLOYER_OF",
              "CEO_OF",
              "CEO",
              "AUTHORIZED_PERSON_OF",
              "REPRESENTED_BY",
              "PERSONAL_CONTACT",
              "PERSONAL_CONTACT_OF",
              "EXECUTIVE_BOARD_MEMBER_OF",
              "EXECUTIVE_BOARD_MEMBER",
              "PARENT_COMPANY_OF",
              "SUBSIDIARY_OF",
              "BOARD_MEMBER_OF",
              "BOARD_MEMBER",
              "MEMBER_OF_THE_BOARD_OF_DIRECTORS_OF",
              "MEMBER_OF_THE_BOARD_OF_DIRECTORS",
              "AREA_MANAGER_OF",
              "AREA_MANAGER",
              "INSURANCE_BROKER",
              "INSURANCE_BROKER_OF",
              "FINANCIAL_INTERMEDIARY",
              "FINANCIAL_INTERMEDIARY_OF",
              "BOARD",
              "BOARD_OF",
              "HEAD_OF_ADMINISTRATION",
              "ASSET_MANAGER",
              "ASSET_MANAGER_OF",
              "ASSOCIATION_MEMBER",
              "ASSOCIATION_MEMBER_OF",
              "RESPONSIBLE_ORGANIZATION_IS",
              "EXTERNAL_PERSON",
              "EXTERNAL_PERSON_OF",
              "BRANCH_OF",
              "BRANCH",
              "EXTERNAL_ORGANISATION",
              "EXTERNAL_ORGANISATION_FOR",
              "CFO_OF",
              "CFO",
              "AUDIT_CONTROL_BODY",
              "AUDIT_CONTROL_BODY_OF",
              "CONTROLLER",
              "CONTROLLER_OF",
              "CHAIRMAN_OF_THE_FOUNDATION_BOARD",
              "CHAIRMAN_OF_THE_FOUNDATION_BOARD_OF",
              "GENERAL_SECRETARY",
              "GENERAL_SECRETARY_OF",
              "STAFF_HR",
              "STAFF_HR_OF",
              "HEAD_HR",
              "HEAD_HR_OF",
              "BOARD_OF_TRUSTEES_OF",
              "BOARD_OF_TRUSTEES",
              "COO_OF",
              "COO",
              "STAFF",
              "STAFF_OF",
              "LEGAL_REPRESENTATIVE",
              "LEGAL_REPRESENTATIVE_OF",
              "CUSTOMER",
              "CONTACT_PERSON",
              "GROUP_MEMBER",
              "GROUP_MEMBER_OF",
              "VAT_GROUP_HEAD_OFFICE",
              "VAT_GROUP_MEMBER",
              "IND_LIFE_BROKER_CONSULTANT_IS",
              "IND_LIFE_BROKER_CONSULTANT_FROM",
              "IND_LIFE_CLERK_IS",
              "IND_LIFE_CLERK_FOR",
              "GROUP_LIFE_CONSULTANT_IS",
              "GROUP_LIFE_CONSULTANT_FOR",
              "GROUP_LIFE_ADMIN_TEAM_IS",
              "GROUP_LIFE_ADMIN_TEAM_FOR",
              "GROUP_LIFE_CLERK_IS",
              "GROUP_LIFE_CLERK_FOR",
              "PNC_BROKER_CONSULTANT_IS",
              "PNC_BROKER_CONSULTANT_FOR",
              "PNC_ADVISOR_P_IS",
              "PNC_ADVISOR_P_FOR",
              "PNC_ADVISOR_U_IS",
              "PNC_ADVISOR_U_FOR",
              "PNC_ADVISOR_KPV_IS",
              "PNC_ADVISOR_KPV_FOR",
              "PNC_BACKOFFICE_IS",
              "PNC_BACKOFFICE_FOR",
              "PNC_GA_GENEVA_IS",
              "PNC_GA_GENEVA_FOR",
              "UW_PROPERTY_IS",
              "UW_PROPERTY_FOR",
              "UW_TECH_EXCL_BAU_IS",
              "UW_TECH_EXCL_BAU_FOR",
              "UW_AH_IS",
              "UW_AH_FOR",
              "UW_VH_IS",
              "UW_VH_FOR",
              "UW_KPV_IS",
              "UW_KPV_FOR",
              "UW_TRANSPORT_IS",
              "UW_TRANSPORT_FOR",
              "UW_AVIATION_IS",
              "UW_AVIATION_FOR",
              "UW_TECH_BAU_IS",
              "UW_TECH_BAU_FOR",
              "AXA_ARAG_IS",
              "AXA_ARAG_FOR",
              "CREDIT_DEPOSIT_IS",
              "CREDIT_DEPOSIT_FOR",
              "LEAD_IS",
              "LEAD_FOR",
              "INTERMEDIARY_IS",
              "INTERMEDIARY_FOR",
              "STRATEGIC_ADVISOR_IS",
              "STRATEGIC_ADVISOR_FOR",
              "SUPERVISOR_CBV_IS",
              "SUPERVISOR_CBV_FOR",
              "RISK_CONSULTANT_IS",
              "RISK_CONSULTANT_FOR",
              "ADMINISTRATION_IS",
              "ADMINISTRATION_FOR",
              "LIVES_IN_A_SHARED_APARTMENT_WITH"
            ],
            "example": "IS_MARRIED_WITH"
          },
          "partnerId": {
            "type": "integer",
            "example": 123456,
            "description": "ID of the partner in relation to"
          },
          "validFrom": {
            "type": "string",
            "format": "date",
            "example": "2023-01-01",
            "description": "date from where the relation is valid.",
            "maxLength": 10
          },
          "validTo": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "example": "9999-12-31",
            "description": "date until the relation is valid.",
            "maxLength": 10
          }
        }
      },
      "PartnerPaymentAccountsCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PartnerPaymentBase"
          },
          {
            "$ref": "#/components/schemas/PartnerPaymentUpdate"
          }
        ]
      },
      "PartnerPaymentAccountsModify": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PartnerPaymentUpdate"
          }
        ],
        "required": [
          "usage",
          "status"
        ]
      },
      "PartnerPaymentAccounts": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PartnerPaymentBase"
          },
          {
            "$ref": "#/components/schemas/PartnerPaymentUpdate"
          },
          {
            "$ref": "#/components/schemas/PartnerPaymentId"
          },
          {
            "$ref": "#/components/schemas/PartnerPaymentBank"
          }
        ]
      },
      "PartnerPaymentBase": {
        "type": "object",
        "required": [
          "type",
          "country"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "account type of the payment accounts",
            "enum": [
              "POST",
              "BANK",
              "ESR",
              "QR-IBAN"
            ],
            "example": "QR-IBAN"
          },
          "country": {
            "type": "string",
            "maxLength": 2,
            "description": "Country of the account holder to ISO 3166-1.",
            "example": "CH"
          },
          "iban": {
            "type": "string",
            "maxLength": 40,
            "description": "iban of the payment accounts.",
            "example": "CH9300762011623852957"
          },
          "number": {
            "type": "string",
            "maxLength": 18,
            "description": "account number of the payment accounts.",
            "example": "243234234"
          }
        }
      },
      "PartnerPaymentUpdate": {
        "type": "object",
        "required": [
          "usage"
        ],
        "properties": {
          "usage": {
            "type": "array",
            "description": "Active usage of the account",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "PAYEE_DAMAGE_BENEFIT",
                "NONE",
                "MEDICAL_SERVICE_PROVIDER",
                "PREMIUM_REFUND",
                "PREMIUM_DEBIT_IND_LIFE",
                "DAILY_BENEFIT_HEALTHCARE",
                "BENEFITS_GROUP_LIFE",
                "PREMIUM_REFUND_IND_LIFE",
                "BENEFITS_IND_LIFE",
                "PREMIUM_DEBIT_PNC_IND_LIFE_NEW",
                "CUSTODY_ACCOUNT"
              ],
              "example": "PAYEE_DAMAGE_BENEFIT"
            }
          },
          "usageValues": {
            "type": "array",
            "description": "List of additional values to specific usages",
            "items": {
              "$ref": "#/components/schemas/PartnerPaymentUsageData"
            }
          },
          "status": {
            "type": "string",
            "description": "Status of the payment accounts",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "example": "ACTIVE"
          },
          "alternativeOwner": {
            "type": "string",
            "nullable": true,
            "maxLength": 60,
            "description": "alternative owner of the banking account.",
            "example": "John D."
          }
        }
      },
      "PartnerPaymentUsageData": {
        "type": "object",
        "required": [
          "usage",
          "value"
        ],
        "properties": {
          "usage": {
            "type": "string",
            "description": "Active usage of the account",
            "enum": [
              "MEDICAL_SERVICE_PROVIDER"
            ],
            "example": "MEDICAL_SERVICE_PROVIDER"
          },
          "value": {
            "type": "string",
            "maxLength": 60,
            "description": "value of a specific usage",
            "example": "U123123"
          }
        }
      },
      "PartnerPaymentId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "234234-0001",
            "description": "Unique id to identify a payment account"
          }
        }
      },
      "PartnerPaymentBank": {
        "type": "object",
        "properties": {
          "bank": {
            "type": "object",
            "description": "bank information of the account",
            "allOf": [
              {
                "$ref": "#/components/schemas/PartnerBank"
              }
            ]
          }
        }
      },
      "PartnerBank": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 60,
            "description": "bank name of the payment accounts",
            "example": "Raiffeisenbank Zürcher Oberland"
          },
          "streetName": {
            "type": "string",
            "maxLength": 70,
            "description": "full street name incl number of the payment accounts",
            "example": "Bahnhofstrasse 1"
          },
          "postCodeTown": {
            "type": "string",
            "maxLength": 40,
            "description": "postal code and town of the payment accounts",
            "example": "8610 Uster"
          },
          "bankCode": {
            "type": "string",
            "maxLength": 15,
            "description": "bank code (DE: BLZ) of the bank",
            "example": "81471"
          },
          "swift": {
            "type": "string",
            "maxLength": 11,
            "description": "swift code of payment accounts",
            "example": "RAIFCH22E71"
          }
        }
      },
      "PartnerContactInformationPreferenceObject": {
        "type": "object",
        "properties": {
          "contactInformationPreference": {
            "type": "object",
            "description": "Customer portal contact information preference of partner",
            "allOf": [
              {
                "$ref": "#/components/schemas/PartnerContactInformationPreference"
              }
            ]
          }
        }
      },
      "PartnerContactInformationPreference": {
        "type": "object",
        "required": [
          "customerPortal",
          "preference"
        ],
        "properties": {
          "customerPortal": {
            "type": "boolean",
            "description": "Flag whether partner is onboarded on our customer portal.",
            "example": true
          },
          "preference": {
            "type": "string",
            "description": "Preference for customer portal contact information",
            "enum": [
              "UNKNOWN",
              "LETTER",
              "EMAIL",
              "PORTAL"
            ],
            "example": "UNKNOWN"
          }
        }
      },
      "PartnerAddressList": {
        "type": "array",
        "description": "List of partner addresses",
        "items": {
          "$ref": "#/components/schemas/PartnerAddressObject"
        }
      },
      "PartnerAddressesObject": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "description": "List of partner addresses",
            "items": {
              "$ref": "#/components/schemas/PartnerAddressObject"
            }
          }
        }
      },
      "PartnerContactInformationList": {
        "type": "array",
        "description": "List of all contactInformation",
        "items": {
          "$ref": "#/components/schemas/PartnerContactInformation"
        }
      },
      "PartnerContactInformationObject": {
        "type": "object",
        "properties": {
          "contactInformation": {
            "type": "array",
            "description": "List of all contactInformation",
            "items": {
              "$ref": "#/components/schemas/PartnerContactInformation"
            }
          }
        }
      },
      "PartnerContactInformation": {
        "type": "object",
        "required": [
          "type",
          "usage",
          "value"
        ],
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 10,
            "description": "Id per contact information",
            "readOnly": true,
            "example": "EMAIL-1"
          },
          "type": {
            "type": "string",
            "description": "represents the type of contact information.",
            "enum": [
              "PHONE",
              "MOBILE",
              "EMAIL",
              "FAX",
              "URL"
            ],
            "example": "EMAIL"
          },
          "isDefault": {
            "type": "boolean",
            "readOnly": true,
            "description": "Flag to indicate if it is the default per type",
            "example": true
          },
          "usage": {
            "type": "string",
            "description": "represents if private or business contact information.",
            "enum": [
              "PRIVATE",
              "BUSINESS"
            ],
            "example": "PRIVATE"
          },
          "value": {
            "type": "string",
            "description": "value of the contact information. Can be phone, mobile or fax number or email address.",
            "maxLength": 241,
            "example": "jane.doe@example.com"
          },
          "remark": {
            "type": "string",
            "description": "remark of the contact information.",
            "maxLength": 50,
            "example": "This is a remark for this contact information."
          }
        }
      },
      "PartnerContactInformationValue": {
        "type": "object",
        "properties": {
          "usage": {
            "type": "string",
            "description": "represents if private or business contact information.",
            "enum": [
              "PRIVATE",
              "BUSINESS"
            ],
            "example": "PRIVATE"
          },
          "value": {
            "type": "string",
            "description": "value of the contact information. Can be phone, mobile or fax number or email address.",
            "maxLength": 241,
            "example": "jane.doe@example.com"
          },
          "remark": {
            "type": "string",
            "description": "remark of the contact information.",
            "maxLength": 50,
            "example": "This is a remark for this contact information."
          }
        }
      },
      "PartnerPartnerRelationsObject": {
        "type": "object",
        "properties": {
          "partnerRelations": {
            "type": "array",
            "description": "List of partner relations",
            "items": {
              "$ref": "#/components/schemas/PartnerPartnerRelationObject"
            }
          }
        }
      },
      "PartnerPartnerRelations": {
        "type": "array",
        "description": "List of partner relations",
        "items": {
          "$ref": "#/components/schemas/PartnerPartnerRelationObject"
        }
      },
      "PartnerPaymentAccountsObject": {
        "type": "object",
        "properties": {
          "paymentAccounts": {
            "type": "array",
            "description": "List of partner payment accounts (filter: CH / LI, active and no QR-IBAN)",
            "items": {
              "$ref": "#/components/schemas/PartnerPaymentAccounts"
            }
          }
        }
      },
      "PartnerPaymentAccountsList": {
        "type": "array",
        "description": "List of partner payment accounts (filter: CH / LI, active and no QR-IBAN)",
        "items": {
          "$ref": "#/components/schemas/PartnerPaymentAccounts"
        }
      },
      "PartnerNaturalPerson": {
        "type": "object",
        "required": [
          "firstname",
          "lastname",
          "gender"
        ],
        "properties": {
          "firstname": {
            "type": "string",
            "example": "Jane",
            "description": "Firstname of the partner.",
            "maxLength": 40
          },
          "lastname": {
            "type": "string",
            "example": "Doe",
            "description": "Lastname of the partner.",
            "maxLength": 40
          },
          "birthdate": {
            "type": "string",
            "format": "date",
            "example": "1990-07-21",
            "description": "Date of birth of the partner.",
            "maxLength": 10
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE"
            ],
            "example": "FEMALE",
            "description": "Gender of the partner."
          },
          "citizenship": {
            "type": "string",
            "description": "Citizenship of the partner.",
            "example": "CH",
            "maxLength": 2
          },
          "citizenshipSecondary": {
            "type": "string",
            "description": "Citizenship 2 of the partner.",
            "example": "DE",
            "maxLength": 2
          }
        }
      },
      "PartnerLegalPerson": {
        "type": "object",
        "required": [
          "companyName"
        ],
        "properties": {
          "companyName": {
            "type": "string",
            "description": "Name of the company.",
            "example": "CleanHouse GmbH",
            "maxLength": 40
          },
          "companyNameExtension": {
            "type": "string",
            "description": "Extended name of the company.",
            "example": "c/o Hans Meier",
            "maxLength": 40
          }
        }
      },
      "ContactDocumentationItemReport": {
        "type": "object",
        "required": [
          "id",
          "description",
          "creationDate",
          "category"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the contact documentation item",
            "example": "5254000b-04c2-1edd-aaa3-16bfddf1d91c"
          },
          "description": {
            "type": "string",
            "description": "Description of the contract documentation item",
            "example": "360 Grad Report"
          },
          "creationDate": {
            "type": "string",
            "format": "date",
            "example": "2023-07-11",
            "description": "Creation date of the item in ISO format \"YYYY-MM-DD\"."
          },
          "category": {
            "type": "string",
            "description": "Category of the contact documentation item",
            "enum": [
              "REPORT"
            ],
            "example": "REPORT"
          }
        }
      },
      "ContactDocumentationItemLead": {
        "type": "object",
        "required": [
          "id",
          "description",
          "creationDate",
          "category"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the contact documentation item",
            "example": "5254000b-04c2-1edd-aaa3-16bfddf1d91c"
          },
          "description": {
            "type": "string",
            "description": "Description of the contract documentation item",
            "example": "360 Grad Report"
          },
          "creationDate": {
            "type": "string",
            "format": "date",
            "example": "2023-07-11",
            "description": "Creation date of the item in ISO format \"YYYY-MM-DD\"."
          },
          "customerEmailAddress": {
            "type": "string",
            "description": "Email address of the customer the lead was created for.",
            "example": "harry.hole@example.com"
          },
          "category": {
            "type": "string",
            "description": "Category of the contact documentation item",
            "enum": [
              "LEAD"
            ],
            "example": "LEAD"
          }
        }
      },
      "CreditCheck": {
        "type": "object",
        "required": [
          "id",
          "description",
          "creationDate",
          "category"
        ],
        "properties": {
          "firstname": {
            "type": "string",
            "example": "Jane",
            "description": "Firstname of the partner.",
            "maxLength": 40
          },
          "lastname": {
            "type": "string",
            "example": "Doe",
            "description": "Lastname of the partner.",
            "maxLength": 40
          },
          "birthdate": {
            "type": "string",
            "format": "date",
            "example": "1990-07-21",
            "description": "Date of birth of the partner.",
            "maxLength": 10
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE"
            ],
            "example": "FEMALE",
            "description": "Gender of the partner."
          },
          "phoneNumber": {
            "type": "string",
            "example": "+41 44 123 45 67",
            "description": "Phone number",
            "maxLength": 30
          },
          "mobilePhoneNumber": {
            "type": "string",
            "example": "+41 79 123 45 67",
            "description": "Mobile phone number",
            "maxLength": 30
          },
          "emailAddress": {
            "type": "string",
            "format": "email",
            "example": "jane.doe@example.com",
            "description": "email address",
            "maxLength": 241
          },
          "streetName": {
            "type": "string",
            "maxLength": 50,
            "example": "Bahnhofstrasse",
            "description": "Street name filter attribute."
          },
          "postCode": {
            "type": "string",
            "maxLength": 10,
            "example": "9500",
            "description": "Valid post code of the customer's current residence."
          },
          "town": {
            "type": "string",
            "maxLength": 50,
            "example": "Wil",
            "description": "Name of the town of the customer's current residence."
          },
          "country": {
            "type": "string",
            "maxLength": 2,
            "description": "Country of the account holder to ISO 3166-1.",
            "example": "CH"
          },
          "creditCheck": {
            "type": "boolean",
            "readOnly": true,
            "maxLength": 10,
            "description": "boolean value whether the person is allowed to take the insurance",
            "example": true
          }
        }
      },
      "AddressWorldwideObject": {
        "type": "object",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "$ref": "#/components/schemas/AddressWorldwide"
          }
        }
      },
      "AddressWorldwide": {
        "type": "object",
        "required": [
          "streetName",
          "postCode",
          "town",
          "country"
        ],
        "properties": {
          "streetName": {
            "type": "string",
            "example": "Bundesplatz",
            "description": "Street name",
            "maxLength": 60
          },
          "houseNumber": {
            "type": "string",
            "example": "1",
            "description": "House number, including letters if applicable",
            "maxLength": 10
          },
          "postCode": {
            "type": "string",
            "example": "3000",
            "description": "Valid post code of the customer's current residence.",
            "maxLength": 10
          },
          "town": {
            "type": "string",
            "example": "Bern",
            "description": "Name of the town",
            "maxLength": 40
          },
          "state": {
            "type": "string",
            "example": "BE",
            "readOnly": true,
            "description": "Abbreviation of the state",
            "maxLength": 3
          },
          "country": {
            "type": "string",
            "example": "CH",
            "description": "Country of residence according to ISO 3166-1.",
            "maxLength": 2
          }
        }
      },
      "AxaError": {
        "type": "object",
        "required": [
          "errorCode",
          "errorMessage"
        ],
        "properties": {
          "errorCode": {
            "type": "string",
            "example": "VALIDATION_ERROR",
            "description": "Unique error code."
          },
          "errorMessage": {
            "type": "string",
            "example": "Input validation failed",
            "description": "Short description of the error."
          },
          "errorReasons": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "message",
                "code"
              ],
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Attribute 'xxxx' must not be longer than 50 chars."
                },
                "code": {
                  "type": "string",
                  "example": "ERROR_012",
                  "description": "Unique reason code for this specific reason."
                },
                "location": {
                  "type": "string",
                  "example": "/rootLevel/xxxx",
                  "description": "Location within message where the error is related to."
                }
              }
            },
            "description": "List of error reasons if multiple reasons are related to the same error."
          }
        }
      }
    },
    "examples": {
      "ReadContactDocumentationItem": {
        "value": [
          {
            "id": "4358967b-26cc-4d21-82c4-af73376a6c83",
            "description": "360 Grad Report",
            "creationDate": "2023-08-12",
            "category": "REPORT"
          },
          {
            "id": "b809cfd9-a24b-4b75-ae04-636a0d7cc0e5",
            "description": "Vermittlung",
            "creationDate": "2023-07-24",
            "category": "LEAD",
            "customerEmailAddress": "harry.hole@example.com"
          }
        ]
      }
    },
    "securitySchemes": {
      "oauth2-client-credentials": {
        "type": "oauth2",
        "description": "Authorization: Bearer <token>",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://maam.axa.com/maam/v2/token",
            "scopes": {
              "axa-ch_openapi_partner_read": "openapi partner read scope",
              "axa-ch_openapi_partner_write": "openapi partner write scope"
            }
          }
        }
      }
    },
    "responses": {},
    "parameters": {}
  },
  "externalDocs": {
    "description": "Developer documentation for AXA OpenAPI",
    "url": "https://secure.axa.ch/developer"
  },
  "security": [
    {
      "oauth2-client-credentials": []
    }
  ]
}